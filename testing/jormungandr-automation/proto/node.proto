syntax = "proto3";

import "types.proto";

// gRPC protocol for a blockchain node
package iohk.chain.node;

// Request message for method Handshake.
message HandshakeRequest {
  // Nonce for the server to authenticate its node ID with.
  bytes nonce = 1;
}

// Response message for method Handshake.
message HandshakeResponse {
  // Version of the protocol implemented by the server.
  uint32 version = 1;
  // The identifier of the genesis block. This can be used by the client
  // to determine if the server node runs the expected blockchain.
  bytes block0 = 2;
  // Node ID of the server, the public key of a key pair.
  bytes node_id = 3;
  // Signature of the client's nonce using the private key in the server's
  // key pair.
  bytes signature = 4;
  // Nonce for the client to authenticate its node ID with.
  bytes nonce = 5;
}

// Request message for method ClientAuth.
message ClientAuthRequest {
  // Node ID of the client, the public key of a key pair.
  bytes node_id = 1;
  // Signature of the server's nonce sent in HandshakeResponse,
  // using the private key in the client's key pair.
  bytes signature = 2;
}

// Response message for method ClientAuth.
message ClientAuthResponse {}

// Request message for method Tip.
message TipRequest {}

// Response message for method Tip.
message TipResponse {
  // Serialized content of the tip block header.
  bytes block_header = 1;
}

// Request for peers
message PeersRequest { uint32 limit = 1; }

// Responses as a bunch of peers, similar to Gossip
message PeersResponse { repeated bytes peers = 2; }

// Request message for method PullHeaders.
// This message can also be send by the service as a BlockEvent variant.
message PullHeadersRequest {
  // The identifiers of blocks to consider as the
  // starting point, in order of appearance.
  repeated bytes from = 1;
  // The identifier of the end block.
  bytes to = 2;
}

// Request message for method PullBlocksToTip.
message PullBlocksToTipRequest {
  // The identifiers of blocks to consider as the
  // starting point, in order of appearance.
  repeated bytes from = 1;
}

// Request message for method PullBlocks
message PullBlocksRequest {
  // The identifiers of blocks to consider as the starting point in order of
  // appearance.
  repeated bytes from = 1;
  // The identifier of the end block
  bytes to = 2;
}

// Response message for method PushHeaders.
message PushHeadersResponse {}

// Response message for method UploadBlocks.
message UploadBlocksResponse {}

// Gossip message with information on nodes in the network.
message Gossip {
  // Serialized descriptions of nodes.
  repeated bytes nodes = 2;
}

// Element of the subscription stream returned by BlockSubscription.
message BlockEvent {
  oneof item {
    // Announcement of a new block, carrying the block's header.
    types.Header announce = 1;
    // Solicitation to upload identified blocks with an UploadBlocks
    // method call.
    types.BlockIds solicit = 2;
    // Solicitation to push the chain of block headers with a PushHeaders
    // method call.
    PullHeadersRequest missing = 3;
  }
}

service Node {
  // Initial handshake and authentication of the server node.
  rpc Handshake(HandshakeRequest) returns (HandshakeResponse);

  // Optional authentication of the client node.
  // Called after Handshake.
  rpc ClientAuth(ClientAuthRequest) returns (ClientAuthResponse);

  rpc Tip(TipRequest) returns (TipResponse);

  // Requests for some peers
  rpc Peers(PeersRequest) returns (PeersResponse);

  rpc GetBlocks(types.BlockIds) returns (stream types.Block) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc GetHeaders(types.BlockIds) returns (stream types.Header) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc GetFragments(types.FragmentIds) returns (stream types.Fragment) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Requests headers of blocks in the chain in the chronological order,
  // given a selection of possible starting blocks known by the requester,
  // and the identifier of the end block to be included in the returned
  // sequence.
  rpc PullHeaders(PullHeadersRequest) returns (stream types.Header) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Requests blocks in the chain in the chronological order, given a selection
  // of possible starting blocks known by the requester, and the identifier of
  // the end block to be included in the returned sequence.
  rpc PullBlocks(PullBlocksRequest) returns (stream types.Block) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  rpc PullBlocksToTip(PullBlocksToTipRequest) returns (stream types.Block);

  // Sends headers of blocks to the service in response to a `missing`
  // item received from the BlockSubscription response stream.
  // The headers are streamed the in chronological order of the chain.
  rpc PushHeaders(stream types.Header) returns (PushHeadersResponse);

  // Uploads blocks to the service in response to a `solicit` item
  // received from the BlockSubscription response stream.
  rpc UploadBlocks(stream types.Block) returns (UploadBlocksResponse);

  // Establishes a bidirectional stream to exchange information on new
  // blocks created or accepted by the peers.
  rpc BlockSubscription(stream types.Header) returns (stream BlockEvent);

  // Establishes a bidirectional stream to exchange information on new
  // block fragments created or accepted by the peers.
  rpc FragmentSubscription(stream types.Fragment)
      returns (stream types.Fragment);

  // Establishes a bidirectional stream to exchange information on new
  // network peers.
  rpc GossipSubscription(stream Gossip) returns (stream Gossip);
}
