#!/bin/sh
#
# The script creates a bft or genesis configuration with 1 faucet with a hardcoded amount.
# It also configure a fixed account that is not exposed that prevent emptying the source of
# stake in the system
#
# See help (-h) for synopsis
#
# Disclaimer:
#
#  The following use of shell script is for demonstration and understanding
#  only, it should *NOT* be used at scale or for any sort of serious
#  deployment, and is solely used for learning how the node and blockchain
#  works, and how to interact with everything.
#

### CONFIGURATION

CLI=jcli
NODE=jormungandr
COLORS=1
CLEAN=0
DPATH="${PWD}"
REST_HOST="127.0.0.1"
REST_PORT="8443"
FEE_CONSTANT=10
FEE_CERTIFICATE=0
FEE_COEFFICIENT=0
SLOT_DURATION=10
SLOTS_PER_EPOCH=5000

FAUCET_AMOUNT=1000000000000
FIXED_AMOUNT=1000000000000
ADDRTYPE="--testing"

CONSENSUS="genesis_praos"
SECRET_PATH="."
CONFIG_PATH="."
ADD_STARTUP_SCRIPT=0

check_program_in_path () {
    # check if the command exists
    command -v $1 > /dev/null
    # fail if the command does not exist and the argument is not a path to an
    # executable
    if [ $? -ne 0 ] && [ ! -f $1 ] ; then
        echo "$1 is required but not found in \$PATH"
        exit 1
    fi
}

check_program_in_path $CLI
check_program_in_path $NODE

# exit on failure inside pipes (might be unavailable on some shells)
set -o | grep 'pipefail' > /dev/null
if [ $? -eq 0 ]; then
  set -o pipefail
fi
# exit on failure
set -e

while getopts 'bc:ghk:p:s:xCod:e:' c
do
    case $c in
        b) CONSENSUS="bft" ;;
        g) CONSENSUS="genesis_praos" ;;
        p) REST_PORT="${OPTARG}" ;;
        k) SECRET_PATH="${OPTARG}" ;;
        c) CONFIG_PATH="${OPTARG}" ;;
        x) ADD_STARTUP_SCRIPT=1 ;;
        s) SLOT_DURATION="${OPTARG}" ;;
        e) SLOTS_PER_EPOCH="${OPTARG}" ;;
        C) COLORS=0 ;;
        o) CLEAN=1 ;;
        d) DPATH="${OPTARG}" ;;
        h)
            echo "usage: $0"
            echo "    [-p <REST_PORT>] [-b|-g]"
            echo "    [-k <SECRET-PATH>] [-c <CONFIG-PATH>]"
            echo "    [-s <SLOT-DURATION>] [-e <SLOTS-PER-EPOCH>]"
            echo ""
            echo "  -p <REST_PORT>       REST PORT for the service to listen on"
            echo "  -b                   Use BFT consensus mode"
            echo "  -g                   Use Genesis-praos consensus mode"
            echo "  -x                   Add startup script"
            echo "  -k <SECRET-PATH>     The path to write secret files"
            echo "  -c <CONFIG-PATH>     The path to write config files"
            echo "  -d <DATA-PATH>       The path to write sqlite files"
            echo "  -s <SLOT-DURATION>   Duration of a slot in seconds"
            echo "  -e <SLOTS-PER-EPOCH> Number of slots in each epoch"
            echo "  -C                   Disable ansi shell colours in stdout"
            echo "  -o                   Overwrite existing sqlite files"
            exit 0
            ;;
    esac
done

STORAGE="${DPATH}/jormungandr-storage-test"

[ -n "${REST_PORT}" ] && [ "${REST_PORT}" -eq "${REST_PORT}" ] 2>/dev/null
if [ $? -ne 0 ]; then
    echo "error: ${REST_PORT} is not valid number"
    exit 1
fi

if [ ${CLEAN} -eq 0 ] && [ -f ${STORAGE}/blocks.sqlite ]; then
    echo "error: directory ${STORAGE} contains blocks.sqlite already, use -o to overwrite"
    exit 1
elif [ ${CLEAN} -eq 1 ] && [ -f ${STORAGE}/blocks.sqlite ]; then
    find ${STORAGE} -type f -exec rm {} \;
fi

if [ ! -d "${DPATH}" ] || [ ! -w "${DPATH}" ]; then
    echo "error: path to store (${DPATH}) sqlite files does not exist or your user does not have write permission"
    exit 1
fi

REST_DEST="${REST_HOST}:${REST_PORT}"
REST_URL="http://${REST_DEST}/api"

### COLORS
if [ ${COLORS} -eq 1 ]; then
    GREEN=`printf "\033[0;32m"`
    RED=`printf "\033[0;31m"`
    BLUE=`printf "\033[0;33m"`
    WHITE=`printf "\033[0m"`
else
    GREEN=""
    RED=""
    BLUE=""
    WHITE=""
fi

CLIVER=$($CLI --version)
if [ $? -ne 0 ]; then
    echo "error: could find cli at $CLI"
    exit 2
fi

NODEVER=$($NODE --version)
if [ $? -ne 0 ]; then
    echo "error: could find node at $NODE"
    exit 2
fi

echo "########################################################"
echo ""
echo "* Consensus      : ${RED}${CONSENSUS}${WHITE}"
echo "* REST Port      : ${RED}${REST_PORT}${WHITE}"
echo "* Slot duration  : ${RED}${SLOT_DURATION}${WHITE}"
echo "* Slots per epoch: ${RED}${SLOTS_PER_EPOCH}${WHITE}"
echo ""
echo "########################################################"
echo ""
echo "* CLI  version: ${GREEN}${CLIVER}${WHITE}"
echo "* NODE version: ${GREEN}${NODEVER}${WHITE}"
echo ""
echo "########################################################"
echo ""

TMPDIR=TMP.$$

mkdir $TMPDIR
mkdir -p "${CONFIG_PATH}"
mkdir -p "${SECRET_PATH}"

### MAKE EVERYTHING

# faucet
FAUCET_SK=$($CLI key generate --type=Ed25519Extended)
FAUCET_PK=$(echo ${FAUCET_SK} | $CLI key to-public)
FAUCET_ADDR=$($CLI address account ${ADDRTYPE} ${FAUCET_PK})

# fixed account
FIXED_SK=$($CLI key generate --type=Ed25519Extended)
FIXED_PK=$(echo ${FIXED_SK} | $CLI key to-public)
FIXED_ADDR=$($CLI address account ${ADDRTYPE} ${FIXED_PK})

# leader
LEADER_SK=$($CLI key generate --type=Ed25519)
LEADER_PK=$(echo ${LEADER_SK} | $CLI key to-public)

# stake pool
POOL_VRF_SK=$($CLI key generate --type=Curve25519_2HashDH)
POOL_KES_SK=$($CLI key generate --type=SumEd25519_12)

POOL_VRF_PK=$(echo ${POOL_VRF_SK} | $CLI key to-public)
POOL_KES_PK=$(echo ${POOL_KES_SK} | $CLI key to-public)

# note we use the faucet as the owner to this pool
STAKE_KEY=${FAUCET_SK}
STAKE_KEY_PUB=${FAUCET_PK}

echo ${LEADER_SK} > ${TMPDIR}/leader.sk
echo ${STAKE_KEY} > ${TMPDIR}/stake_key.sk
echo ${FIXED_SK} > ${TMPDIR}/fixed_key.sk
echo ${POOL_VRF_SK} > ${TMPDIR}/stake_pool.vrf.sk
echo ${POOL_KES_SK} > ${TMPDIR}/stake_pool.kes.sk

$CLI certificate new stake-pool-registration \
    --management-threshold 1 \
    --start-validity 0 \
    --owner ${LEADER_PK} \
    --kes-key ${POOL_KES_PK} \
    --tax-fixed 10 \
    --tax-limit 1000000000 \
    --tax-ratio "1/10" \
    --reward-account ${FAUCET_ADDR} \
    --vrf-key ${POOL_VRF_PK} > ${TMPDIR}/stake_pool.cert

cat ${TMPDIR}/stake_pool.cert | $CLI certificate sign -k ${TMPDIR}/leader.sk > ${TMPDIR}/stake_pool.signcert

STAKE_POOL_ID=$(cat ${TMPDIR}/stake_pool.signcert | $CLI certificate get-stake-pool-id)
STAKE_POOL_CERT=$(cat ${TMPDIR}/stake_pool.signcert)

$CLI certificate new stake-delegation \
    ${FAUCET_PK} \
    ${STAKE_POOL_ID} > ${TMPDIR}/stake_delegation1.cert
cat ${TMPDIR}/stake_delegation1.cert | $CLI certificate sign -k ${TMPDIR}/stake_key.sk > ${TMPDIR}/stake_delegation1.signcert
STAKE_DELEGATION_CERT1=$(cat ${TMPDIR}/stake_delegation1.signcert)

$CLI certificate new stake-delegation \
    ${FIXED_PK} \
    ${STAKE_POOL_ID} > ${TMPDIR}/stake_delegation2.cert
cat ${TMPDIR}/stake_delegation2.cert | $CLI certificate sign -k ${TMPDIR}/fixed_key.sk > ${TMPDIR}/stake_delegation2.signcert
STAKE_DELEGATION_CERT2=$(cat ${TMPDIR}/stake_delegation2.signcert)


cat << EOF > "${CONFIG_PATH}/genesis.yaml"
blockchain_configuration:
  block0_date: $(date +%s)
  discrimination: test
  slots_per_epoch: ${SLOTS_PER_EPOCH}
  slot_duration: ${SLOT_DURATION}
  epoch_stability_depth: 10
  consensus_genesis_praos_active_slot_coeff: 0.1
  consensus_leader_ids:
    - ${LEADER_PK}
  linear_fees:
    constant: ${FEE_CONSTANT}
    coefficient: ${FEE_COEFFICIENT}
    certificate: ${FEE_CERTIFICATE}
  block0_consensus: ${CONSENSUS}
  kes_update_speed: 43200 # 12hours
  total_reward_supply: 100000000000000
  reward_parameters:
    halving:
      constant: 1000
      ratio: "1/1"
      epoch_start: 0
      epoch_rate: 1
  treasury: 0
  treasury_parameters:
    fixed: 0
    ratio: "0/1"
initial:
  - fund:
      - address: ${FAUCET_ADDR}
        value: ${FAUCET_AMOUNT}
      - address: ${FIXED_ADDR}
        value: ${FIXED_AMOUNT}
  - cert: ${STAKE_POOL_CERT}
  - cert: ${STAKE_DELEGATION_CERT1}
  - cert: ${STAKE_DELEGATION_CERT2}
EOF

cat << EOF > "${SECRET_PATH}/pool-secret1.yaml"
genesis:
  sig_key: ${POOL_KES_SK}
  vrf_key: ${POOL_VRF_SK}
  node_id: ${STAKE_POOL_ID}
bft:
  signing_key: ${LEADER_SK}
EOF

cat << EOF > "${CONFIG_PATH}/config.yaml"
storage: "${STORAGE}/"

rest:
  listen: "${REST_DEST}"

p2p:
  trusted_peers: []
  public_address: "/ip4/${REST_HOST}/tcp/8299"
  topics_of_interest:
    messages: low
    blocks: normal
EOF

$CLI genesis encode --input "${CONFIG_PATH}/genesis.yaml" --output "${CONFIG_PATH}/block-0.bin"
if [ $? -ne 0 ]; then
    echo "error: building the genesis block"
    exit 1
fi

BLOCK0_HASH=$($CLI genesis hash --input "${CONFIG_PATH}/block-0.bin")

### PRINT

echo "faucet account: ${GREEN}${FAUCET_ADDR}${WHITE}"
echo "  * public: ${BLUE}${FAUCET_PK}${WHITE}"
echo "  * secret: ${RED}${FAUCET_SK}${WHITE}"
echo "  * amount: ${GREEN}${FAUCET_AMOUNT}${WHITE}"
echo
echo "pool id: ${GREEN}${STAKE_POOL_ID}${WHITE}"
echo "block-0 hash: ${BLUE}${BLOCK0_HASH}${WHITE}"
echo
echo "To start the node:"
if [ $ADD_STARTUP_SCRIPT -eq 1 ]; then
    echo "$NODE --genesis-block \"${CONFIG_PATH}/block-0.bin\" --config \"${CONFIG_PATH}/config.yaml\" --secret \"${SECRET_PATH}/pool-secret1.yaml\"" > startup_script.sh
fi
echo "  $NODE --genesis-block \"${CONFIG_PATH}/block-0.bin\" --config \"${CONFIG_PATH}/config.yaml\" --secret \"${SECRET_PATH}/pool-secret1.yaml\""
echo "To connect using CLI REST:"
echo "  $CLI rest v0 <CMD> --host \"${REST_URL}\""
echo "For example:"
echo "  $CLI rest v0 node stats get -h \"${REST_URL}\""

find "./${TMPDIR}/" -maxdepth 1 -type f -exec rm {} \; && rmdir $TMPDIR

SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"

if [ ! -f "$SCRIPTPATH/faucet-send-money.shtempl" ] || [ ! -f "$SCRIPTPATH/faucet-send-certificate.shtempl" ]; then
    echo "warning: cannot find faucet-send-money or faucet-send-certificate template: skipping !"
else

    process_file() {
      FROM=${1}
      TO=${2}

      sed -e "s/####FAUCET_SK####/${FAUCET_SK}/" \
          -e "s/####BLOCK0_HASH####/${BLOCK0_HASH}/" \
          -e "s;####REST_URL####;${REST_URL};" \
          -e "s;####CLI####;${CLI};" \
          -e "s/####COLORS####/${COLORS}/" \
          -e "s/####FEE_CONSTANT####/${FEE_CONSTANT}/" \
          -e "s/####FEE_CERTIFICATE####/${FEE_CERTIFICATE}/" \
          -e "s/####FEE_COEFFICIENT####/${FEE_COEFFICIENT}/" \
          -e "s/####ADDRTYPE####/${ADDRTYPE}/" \
          -e "s/####STAKE_POOL_ID####/${STAKE_POOL_ID}/" \
          -e "s/####SLOT_DURATION####/${SLOT_DURATION}/" \
          < ${FROM} > ${TO}

      chmod +x ${TO}
    }

    process_file "$SCRIPTPATH/faucet-send-money.shtempl" faucet-send-money.sh
    process_file "$SCRIPTPATH/faucet-send-certificate.shtempl" faucet-send-certificate.sh
    process_file "$SCRIPTPATH/create-account-and-delegate.shtempl" create-account-and-delegate.sh
    process_file "$SCRIPTPATH/create-stakepool.shtempl" create-stakepool.sh
    exit 0
fi
